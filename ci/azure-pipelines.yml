# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# fabric-chaincode-node azure pipeline configuration.
#
name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)

# Daily build for final quality
# cf https://crontab.guru/#0_23_*_*_*
schedules:
  - cron: "0 23 * * *"
    displayName: 'Chaincode Node Nightly Driver'
    branches:
      include:
        - master
    always: true


# Trigger on the master branch
# Standard Pull Request and Merge builds
# Any git tag will also trigger a build that should do publishing
trigger:
  branches:
    include:
      - 'master'
  tags:
    include:
      - '*'


# These are custom defined variables, the pipeline one is currently used for the build scripts
# to know to produce tests results in XML format for Azure to consume, for developers
# this isn't set so command line output is given
#
# Chaincode_Node_Vars is the protected group of keys for publishing
variables:
  - group: Chaincode_Node_Vars
  - name: component
    value: fabric-chaincode-node
  - name: pipeline
    value: ci
  - name: node_version_spec
    value: '12.x'

# Build on Ubuntu
pool:
  vmImage: 'ubuntu-latest'

#
# The stages and jobs, potential for rationalization and optimization
# Keeping it simple and explict whilst we gain experience
stages:

    # Primary stage of building, linting and unit tests
    - stage: Build_and_Test
      jobs:
        # output some basic information for reference
        - job: displayenv
          steps:
            - script: |
                env | sort
        - job: main
          displayName: 'Build, lint, UT'
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: $(node_version_spec)
            - script: |
                set -ev
                node common/scripts/install-run-rush.js install
              displayName: 'Setup the rush environment'
            - script: |
                set -ev
                node common/scripts/install-run-rush.js rebuild
              displayName: 'Full rebuild'

            - task: PublishTestResults@2
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                testResultsFiles: '**/test-results.xml'
                artifactName: 'Unit Test results'
                testRunTitle: 'Unit Test results'
            - task: PublishCodeCoverageResults@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                codeCoverageTool: 'cobertura'
                summaryFileLocation: '**/cobertura-coverage.xml'
                artifactName: 'Unit Test Coverage'
            # CopyFiles can follow symlinks hence be careful with node_modules
            - task: CopyFiles@2
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                contents: |
                  **/*.build*.log
                  !**/node_modules/**
                targetFolder: $(Build.ArtifactStagingDirectory)/logs
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                pathToPublish:  $(Build.ArtifactStagingDirectory)/logs
                artifactName: 'Build logs'
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                pathToPublish: docs/apidocs/_out
                artifactName: 'JS API Doc'

            # Copy the built artifacts to the staging directory, tgz, and the docker image
            - script: |
                set -ev
                node common/scripts/install-run-rush.js publish --include-all --pack --release-folder $(Build.ArtifactStagingDirectory)/tgz --publish
                docker image save hyperledger/fabric-nodeenv | gzip > $(Build.ArtifactStagingDirectory)/fabric-nodeenv.tar.gz
              displayName: 'Package tgz and docker image'
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish:  $(Build.ArtifactStagingDirectory)/tgz
                artifactName: node-tgz
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish:  $(Build.ArtifactStagingDirectory)/fabric-nodeenv.tar.gz
                artifactName: nodeenv-docker-image

        # Run the FV tests but using the built material
        - job: fvt
          displayName: 'FV Tests'
          dependsOn: main
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: $(node_version_spec)
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: nodeenv-docker-image
                path: $(Build.SourcesDirectory)/build
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: node-tgz
                path: $(Build.SourcesDirectory)/build
            - script: |
                set -ev
                ./tools/getEdgeDocker.sh                                # essential to get master docker images of peer etc.
                docker image load --input build/fabric-nodeenv.tar.gz         # gets the build image of nodeenv
                docker images
                node common/scripts/install-run-rush.js install
                node common/scripts/install-run-rush.js update          # should the tests need 'building' this will need to go here
              displayName: 'Get the latest master docker images'
            - script: |
                set -ev
                node common/scripts/install-run-rush.js start-fabric
                node common/scripts/install-run-rush.js start-verdaccio # script will check for the ci variable and use built images
                docker images | grep hyperledger && docker ps -a
                node common/scripts/install-run-rush.js test:fv
                node common/scripts/install-run-rush.js test:e2e
              displayName: 'FV Tests'

            - task: PublishTestResults@2
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                testResultsFiles: '**/test-results.xml'
                testRunTitle: 'FV Test results'
            - task: CopyFiles@2
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                sourceFolder: $(Build.SourcesDirectory)/test
                contents: |
                  **/*.build*.log
                  !**/node_modules/**
                targetFolder: $(Build.ArtifactStagingDirectory)/testlogs
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                pathToPublish:  $(Build.ArtifactStagingDirectory)/testlogs
                artifactName: 'Test logs'
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                pathToPublish: tools/toolchain/network/docker-compose/logs/docker.log
                artifactName: nodeenv-docker-image

        # Job to handle the auditing of the code
        # NPM audit is run on a 'fake' installation of the libraries
        # Pulling in all the dependencies it will be able to run NPM AUDIT, and if that returns a
        # error code the job will fail.
        - job: src_audit
          displayName: 'Node Module Auditing'
          dependsOn: main
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: $(node_version_spec)
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: node-tgz
                path: $(Build.SourcesDirectory)/build
            - script: |
                node common/scripts/install-run-rush.js install
                node common/scripts/install-run-rush.js start-verdaccio # script will check for the ci variable and use built images
                mkdir -p $(Build.SourcesDirectory)/audit && cd $(Build.SourcesDirectory)/audit && npm init -y
                npm install --registry http://localhost:4873 fabric-shim fabric-shim-crypto fabric-shim-api fabric-contract-api --save
                npm audit
              displayName: 'Run npm audit'

        # Publish the snapshot images
        - job: snapshot_publish
          condition: and(succeeded(),eq(variables['Build.Reason'], 'IndividualCI'))
          dependsOn: fvt
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: nodeenv-docker-image
                path: $(Build.SourcesDirectory)/build
            - script: ./ci/scripts/publish_docker.sh
              env:
                NEXUS_USERNAME: $(nexus-user)
                NEXUS_PASSWORD: $(nexus-password)
                NEXUS_URL: nexus3.hyperledger.org:10003/hyperledger
              displayName: 'docker push to nexus'

    # Publish a new version, triggered by a git tag
    - stage: Publish_tag
      dependsOn: Build_and_Test
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      jobs:
        - job: update_version
          steps:
            - script: |
                env | sort
                echo "Update the version number"
                VERSION=$(jq '.version' $(Build.SourcesDirectory)/package.json | sed -r "s/\"([0-9]?[0-9]\.[0-9]?[0-9]\.[0-9]?[0-9]).*/\1/")
                echo Version is :${VERSION}:
                echo "Make sure release notes are present"
                echo "Make sure change history is present"
        - job: npm_publish
          displayName: 'npm publish'
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: $(node_version_spec)
            - download: current
              artifact: node-tgz
            - script: |
                touch $(Agent.TempDirectory)/.npmrc
                echo '##vso[task.setvariable variable=NPM_CONFIG_USERCONFIG]$(Agent.TempDirectory)/.npmrc'
              displayName: 'create user .npmrc file'
            - script: |
                npm config set registry https://registry.npmjs.org/
                npm config ls
              displayName: 'set npmjs registry'
            - task: npmAuthenticate@0
              inputs:
                workingFile: '$(Agent.TempDirectory)/.npmrc'
                customEndpoint: 'fabric-chainode-node-npm'
            - script: |
                find $(Pipeline.Workspace)/node-tgz/ -maxdepth 1 -type f -name 'fabric-*.tgz' -exec npm publish {} --tag latest \;
              displayName: 'npm publish'
        - job: jsdoc_publish
          steps:
            - script: |
                set -ev
                echo "checkout docs branch"
                echo "checking"
