# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
# 
# fabric-chaincode-node azure pipeline configuration.
# 
name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)

trigger:
  branches:
    include:
      - 'release-1.4'
  tags:
    include:
      - '*'

# These are custom defined variables, the pipeline one is currently used for the build scripts
# to know to produce tests results in XML format for Azure to consume, for developers
# this isn't set so command line output is given
# 
variables:
  - group: Chaincode_Node_Vars   
  - name:  component
    value: fabric-chaincode-node
  - name: pipeline
    value: ci 

# Build on Ubuntu
pool:
  vmImage: 'ubuntu-latest'

# 
# The stages and jobs, potential for rationalization and optimization
# Keeping it simple and explict whilst we gain experience
stages:

    - stage: Build_and_Test
      jobs:
        # output some basic information for reference
        - job: displayenv
          steps:
            - script: |
                env | sort
        - job: main
          displayName: 'Build, lint, UT'
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm install
                npm install -g gulp-cli
              displayName: 'Setup the node environment'
            - script: gulp test-headless
              displayName: 'Unit tests'  
            - task: PublishTestResults@2
              inputs:
                testResultsFiles: '**/test-results.xml'
                artifactName: 'Unit Test results'
                testRunTitle: 'Unit Test results'
            - task: PublishCodeCoverageResults@1
              inputs:
                codeCoverageTool: 'cobertura'
                summaryFileLocation: '**/cobertura-coverage.xml'        
                artifactName: 'Unit Test Coverage'
        - job: fvt
          displayName: 'FV Tests'
          dependsOn: main
          steps:         
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm install
                npm install -g gulp-cli
              displayName: 'Setup the node environment'                 
            - script: |
                DEVMODE=false gulp channel-init 
                docker images | grep hyperledger && docker ps -a
                gulp test-e2e 
              displayName: 'FV Tests'  
            - task: PublishTestResults@2
              inputs:
                testResultsFiles: '**/test-results.xml'
                artifactName: 'FV Test results'
                testRunTitle: 'FV Test results'
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way    
              inputs:
                pathToPublish: build/test/network/docker-compose/logs/docker.log
                artifactName: nodeenv-docker-image                    
                
        - job: pack_tgz
          dependsOn: 
            - main 
            - fvt
          steps:
            - script: |
                npm run tgzpack
            - task: CopyFiles@2
              inputs:
                contents: '**/fabric-*/*.tgz'
                targetFolder: $(Build.ArtifactStagingDirectory)/tgz
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: $(Build.ArtifactStagingDirectory)/tgz
                artifactName: MyBuildOutputs
                        
        - job: apidocs
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm install
                npm install -g gulp-cli
              displayName: 'Setup the node environment'            
            - script: |
                gulp docs
              displayName: 'Produce API docs'
            - publish: $(System.DefaultWorkingDirectory)/docs/gen/
              artifact: 'jsdocs'


        # Publish the snapshot images etc.
        # Original source of these is https://github.com/hyperledger/ci-management/blob/master/jjb/fabric-chaincode-java/shell/include-raw-publish-docker-jar.sh
        # - job: snapshot_publish
        #   condition: and(succeeded(),eq(variables['Build.Reason'], 'IndividualCI'))
        #   dependsOn: main
        #   steps:
            # Outline of what the docs publishing would look like
            # - script: |
            #     cd ${BUILD_SOURCEBRANCH}/docs/apidocs
            #     CHAINCODE_NODE_COMMIT=$(git rev-parse --short HEAD)
            #     echo "---------> CHAINCODE_NODE_COMMIT:" $CHAINCODE_NODE_COMMIT
            #     TARGET_REPO=$CHAINCODE_NODE_USERNAME.github.io.git
            #     git config --global user.email "fabric.shim@gmail.com"
            #     git config --global user.name "fabric-shim"
            #     git clone https://github.com/$CHAINCODE_NODE_USERNAME/$TARGET_REPO

            #     # build docs
            #     DOCS_ROOT=$CHAINCODE_NODE_USERNAME.github.io gulp -f docs.js docs

            #     cd $CHAINCODE_NODE_USERNAME.github.io
            #     git add .
            #     git commit -m "CHAINCODE_NODE commit - $CHAINCODE_NODE_COMMIT"
            #     git config remote.gh-pages.url https://$CHAINCODE_NODE_USERNAME:$CHAINCODE_NODE_PASSWORD@github.com/$CHAINCODE_NODE_USERNAME/$TARGET_REPO

            #     # Push API docs to Target repository
            #     git push gh-pages master

            #   env:
            #     CHAINCODE_NODE_USERNAME: fabric-shim

    - stage: Publish_tag
      dependsOn: Build_and_Test
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      jobs:
        - job: update_version
          steps:
            - script: |
                env | sort
                # temporarily use this approach instead of the gittag
                VERSION=$(jq '.version' ${DIR}/package.json | sed -r "s/\"([0-9]?[0-9]\.[0-9]?[0-9]\.[0-9]?[0-9]).*/\1/")                  
                echo Version is :${VERSION}:
                
                npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN

                # Add or delete modules from here.. 
                for modules in fabric-shim fabric-shim-crypto fabric-contract-api; do
                    if [ -d "$modules" ]; then                        
                        cd $modules
                        npmPublish $modules
                        cd -
                    fi
                done
              env:
                NPM_TOKEN: $(NPM)

