# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
# 
# fabric-chaincode-node azure pipeline configuration.
# 
name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)

trigger:
  branches:
    include:
      - 'release-1.4'
  tags:
    include:
      - '*'

# These are custom defined variables, the pipeline one is currently used for the build scripts
# to know to produce tests results in XML format for Azure to consume, for developers
# this isn't set so command line output is given
# 
variables:
  - group: Chaincode_Node_Vars   
  - name:  component
    value: fabric-chaincode-node
  - name: pipeline
    value: ci 

# Build on Ubuntu
pool:
  vmImage: 'ubuntu-latest'

# 
# The stages and jobs, potential for rationalization and optimization
# Keeping it simple and explict whilst we gain experience
stages:

    - stage: Build_and_Test
      jobs:
        # output some basic information for reference
        - job: displayenv
          steps:
            - script: |
                env | sort
        - job: main
          displayName: 'Build, lint, UT'
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm -v
                npm install
                npm install -g gulp-cli
              displayName: 'Setup the node environment'
            - script: cd $(Build.SourcesDirectory)/fabric-contract-api && ../ci/npmAudit.sh
              displayName: 'Run npm audit in fabric-contract-api'
            - script: cd $(Build.SourcesDirectory)/fabric-shim && ../ci/npmAudit.sh
              displayName: 'Run npm audit in fabric-shim'
            - script: cd $(Build.SourcesDirectory)/fabric-shim-crypto && ../ci/npmAudit.sh
              displayName: 'Run npm audit in fabric-shim-crypto'
            - script: gulp test-headless
              displayName: 'Unit tests'
            - task: PublishTestResults@2
              inputs:
                testResultsFiles: '**/test-results.xml'
                artifactName: 'Unit Test results'
                testRunTitle: 'Unit Test results'
            - task: PublishCodeCoverageResults@1
              inputs:
                codeCoverageTool: 'cobertura'
                summaryFileLocation: '**/cobertura-coverage.xml'
                artifactName: 'Unit Test Coverage'
        - job: fvt
          displayName: 'FV Tests'
          dependsOn: main
          steps:         
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm install
                npm install -g gulp-cli
              displayName: 'Setup the node environment'
            - script: |
                DEVMODE=false gulp channel-init 
                docker images | grep hyperledger && docker ps -a
                gulp test-e2e 
              displayName: 'FV Tests'  
            - task: PublishTestResults@2
              inputs:
                testResultsFiles: '**/test-results.xml'
                artifactName: 'FV Test results'
                testRunTitle: 'FV Test results'
            - task: PublishBuildArtifacts@1
              condition: or(succeeded(), failed())   # publish either way
              inputs:
                pathToPublish: build/test/network/docker-compose/logs/docker.log
                artifactName: nodeenv-docker-image
                
        - job: pack_tgz
          dependsOn:
            - main
            - fvt
          steps:
            - script: |
                npm run tgzpack
            - task: CopyFiles@2
              inputs:
                contents: '**/fabric-*/*.tgz'
                targetFolder: $(Build.ArtifactStagingDirectory)/tgz
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: $(Build.ArtifactStagingDirectory)/tgz
                artifactName: node-tgz

        # Build and publish API docs on every merge build
        - job: jsdoc
          condition: and(succeeded(),eq(variables['Build.Reason'], 'IndividualCI'))
          steps:
            - task: NodeTool@0
              inputs:
                versionSpec: '8.x' 
            - script: |
                npm install
              workingDirectory: $(System.DefaultWorkingDirectory)/docs
              displayName: 'Setup the node environment'
            - script: |
                set -ev
                npm run docs
              workingDirectory: $(System.DefaultWorkingDirectory)/docs
              displayName: 'Build JSDoc'
            - task: CopyFiles@2
              inputs:
                contents: |
                  gen/**
                sourceFolder: '$(Build.SourcesDirectory)/docs'
                targetFolder: $(Build.ArtifactStagingDirectory)/jsdoc
                cleanTargetFolder: true
              displayName: 'Copy JSDoc'
            - task: CopyFiles@2
              condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
              inputs:
                contents: |
                  _config.yml
                  **/?(*.md|*.html)
                  !_jsdoc.json
                  !_jsdoc/**
                  !gen/**
                  !node_modules/**
                sourceFolder: '$(Build.SourcesDirectory)/docs'
                targetFolder: $(Build.ArtifactStagingDirectory)/gh-pages
                cleanTargetFolder: true
              displayName: 'Copy gh-pages doc (master branch only)'
            - script: |
                git reset --hard HEAD
                git clean -xdf
                git fetch origin
                git checkout -b gh-pages origin/gh-pages
                git clean -xdf

                mkdir -p $(Build.SourceBranchName)/api
                rm -rf $(Build.SourceBranchName)/api/*
                cp -r $(Build.ArtifactStagingDirectory)/jsdoc/gen/* $(Build.SourceBranchName)/api
                if [ -d $(Build.ArtifactStagingDirectory)/gh-pages ]; then
                  find . -maxdepth 1 ! \( -name [.]* -o -name 'gh-pages' -o -name 'master' -o -name 'release-*' \) -exec rm -rf {} \;
                  cp -r $(Build.ArtifactStagingDirectory)/gh-pages/* .
                fi
              displayName: 'Update gh-pages branch'
            - script: |
                git config --global user.email "hlfdev.azp@gmail.com"
                git config --global user.name "Hyperledger Bot"
                git add -A
                git commit -m "Publishing GitHub Pages"
                git push https://$(GITHUB-PAT)@github.com/hyperledger/fabric-chaincode-node.git gh-pages
              displayName: 'Commit gh-pages changes'

    - stage: Publish_tag
      dependsOn: Build_and_Test
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      jobs:
        - job: npm_publish
          steps:
            - script: |
                touch $(Agent.TempDirectory)/.npmrc
                echo '##vso[task.setvariable variable=NPM_CONFIG_USERCONFIG]$(Agent.TempDirectory)/.npmrc'
              displayName: 'create user .npmrc file'
            - script: |
                npm config set registry https://registry.npmjs.org/
                npm config ls
              displayName: 'set npmjs registry'
            - task: npmAuthenticate@0
              inputs:
                workingFile: '$(Agent.TempDirectory)/.npmrc'
                customEndpoint: 'fabric-chainode-node-npm' 
            - download: current
              artifact: node-tgz
            - script: |
                find $(Pipeline.Workspace)/node-tgz/ -maxdepth 2 -type f -name 'fabric-*.tgz' -exec npm publish {} --tag latest-1.4 \;
              displayName: 'npm publish'


