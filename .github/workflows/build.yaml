# Copyright the Hyperledger Fabric contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: fabric-chaincode-node-build

on:
  push:
    branches:
      - main
      - release-2.5
  pull_request:
    branches:
      - main
      - release-2.5
  create:
    tags:
      - "v2.*"
  workflow_dispatch:

env:
  CHAINCODE_CONTAINER_NODE_VER: 16
  DOCKER_REGISTRY: ${{ github.repository_owner == 'hyperledger' && 'docker.io' || 'ghcr.io' }}

jobs:
  setup:
    runs-on: ubuntu-20.04
    outputs:
      PACKAGE_VERSION: ${{ steps.builddata.outputs.PACKAGE_VERSION }}
      MINOR_PACKAGE_VERSION: ${{ steps.builddata.outputs.MINOR_PACKAGE_VERSION }}
      BUILD_DATE: ${{ steps.builddata.outputs.BUILD_DATE }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: BuildData
        id: builddata
        run: |
          set -ex -o pipefail
          env | sort

          # handle full version number
          VERSION=$(jq '.version' docker/fabric-nodeenv/package.json | sed -r "s/\"([0-9]?[0-9]\.[0-9]?[0-9]\.[0-9]?[0-9]).*/\1/")
          echo Current version in code is :${VERSION}:
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_OUTPUT

          # handle minor version
          MINOR_VERSION=$(jq '.version' docker/fabric-nodeenv/package.json | sed -r "s/\"([0-9]?[0-9]\.[0-9]?[0-9])\.[0-9]?[0-9].*/\1/")
          echo Current minor version in code is :${MINOR_VERSION}:
          echo "MINOR_PACKAGE_VERSION=${MINOR_VERSION}" >> $GITHUB_OUTPUT

          # get the current date for using in dev builds
          BUILD_DATE=$(date '+%Y%m%d')
          echo Build date is :${BUILD_DATE}
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install/Rebuild/UnitTest
        run: |
          set -xev
          node common/scripts/install-run-rush.js install
          node common/scripts/install-run-rush.js rebuild
      - name: Pre-process Artifacts
        run: |
          npx cobertura-merge -o merged_coverage.xml shim=./libraries/fabric-shim/coverage/cobertura-coverage.xml contractapi=./apis/fabric-contract-api/coverage/cobertura-coverage.xml -p
      - uses: actions/upload-artifact@v3
        name: Upload test results
        if: success() || failure()
        with:
          name: TestResults
          path: ./**/test-results.xml

      - name: Build Binaries
        run: |
          set -xev
          node common/scripts/install-run-rush.js publish --include-all --pack --release-folder tgz --publish
          docker image save hyperledger/fabric-nodeenv | gzip > fabric-nodeenv.tar.gz

      - uses: actions/upload-artifact@v3
        name: Binaries
        with:
          name: node-tgzs
          path: tgz/

      - uses: actions/upload-artifact@v3
        name: Docker
        with:
          name: nodeenv-docker-image
          path: fabric-nodeenv.tar.gz

  fvtest:
    runs-on: ubuntu-20.04
    needs: [build]
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/download-artifact@v3
        with:
          name: nodeenv-docker-image
          path: build/
      - uses: actions/download-artifact@v3
        with:
          name: node-tgzs
          path: build/

      - name: Setup the fv build
        env:
          PIPELINE_WORKSPACE: workspace
        run: |
          set -xev
          ./tools/getEdgeDocker.sh                                # essential to get main docker images of peer etc.
          docker image load --input build/fabric-nodeenv.tar.gz         # gets the build image of nodeenv
          docker tag hyperledger/fabric-nodeenv:latest hyperledger/fabric-nodeenv:2.5
          docker images
          node common/scripts/install-run-rush.js install
          node common/scripts/install-run-rush.js update          # should the tests need 'building' this will need to go here
          node common/scripts/install-run-rush.js start-fabric
          node common/scripts/install-run-rush.js start-verdaccio # script will check for the ci variable and use built images

      - name: Run the FV Tests
        run: |
          set -xev
          export TLS=true
          docker images | grep hyperledger && docker ps -a

          node common/scripts/install-run-rush.js test:fv --verbose
          node common/scripts/install-run-rush.js test:e2e --verbose


      - uses: actions/upload-artifact@v3
        if: success() || failure()
        name: TestLogs
        with:
          name: TestLogs
          path: ./**/*.build.log


        # Job to handle the auditing of the code
        # NPM audit is run on a 'fake' installation of the libraries
        # Pulling in all the dependencies it will be able to run NPM AUDIT, and if that returns a
        # error code the job will fail.
  src_audit:
    runs-on: ubuntu-20.04
    needs: build
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: node-tgzs
          path: build/
      - name: run audit
        run: |
          set -xev -o pipefail
          node common/scripts/install-run-rush.js install
          node common/scripts/install-run-rush.js start-verdaccio # script will check for the ci variable and use built images
          mkdir -p audit && cd audit && npm init -y
          npm install --registry http://localhost:4873 fabric-shim fabric-shim-api fabric-contract-api --save
          npm audit --audit-level=moderate

  publishnpm:
    runs-on: ubuntu-20.04
    needs: [build,fvtest,src_audit]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/download-artifact@v3
        with:
          name: node-tgzs
          path: build/
      - run: |
          set -xev
          ls -lart build/
          cd build
          find . -type f -name 'fabric-*.tgz' -exec npm publish {} \;
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


  publishdocker:
    runs-on: ubuntu-20.04
    needs: [setup,build,fvtest,src_audit]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to the ${{ env.DOCKER_REGISTRY }} Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_REGISTRY == 'docker.io' && secrets.DOCKERHUB_USERNAME || github.actor }}
          password: ${{ env.DOCKER_REGISTRY == 'docker.io' && secrets.DOCKERHUB_TOKEN    || secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/fabric-nodeenv
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Build and push ${{ matrix.COMPONENT }} Image
        id: push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          file: docker/fabric-nodeenv/Dockerfile
          context: docker/fabric-nodeenv
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VER=${{ env.CHAINCODE_CONTAINER_NODE_VER }}
